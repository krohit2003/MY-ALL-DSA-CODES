1. MEMOIZATION



long long int  f(int idx,vector<int>&arr,int k,vector<vector<long long int>>&dp){

if(k==0)
return 1;

if(idx==0)
{
	return (k==arr[0]);
}
if(dp[idx][k]!=-1)
return dp[idx][k];

long long pick=0;

if(arr[idx]<=k)
pick=f(idx-1,arr,k-arr[idx],dp);

long long notpick=f(idx-1,arr,k,dp);

dp[idx][k]=pick+notpick;
return pick+notpick;
}

int findWays(vector<int>& arr, int k)
{

	int n=arr.size();
	
vector<vector<long long int>>dp(n,vector<long long int>(k+1,-1));

long long  ans=f(n-1,arr,k,dp);
int ans1=ans%1000000007;
return ans1;

}


2. TABULATION




int findWays(vector<int>& arr, int k)
{

	int n=arr.size();
	
vector<vector<long long int>>dp(n,vector<long long int>(k+1,0));

for(int i=0;i<n;i++)
{
	dp[i][0]=1;
}

if(arr[0]<=k)
dp[0][arr[0]]=1;
for(int i=1;i<n;i++){

for(int j=1;j<=k;j++){

long long int take=0;

if(arr[i]<=j)
{
	take=dp[i-1][j-arr[i]];
}
long long int nottake=dp[i-1][j];

dp[i][j]=take+nottake;
}
}
long long ans=dp[n-1][k];

int ans1=ans%1000000007;
return ans1;

}

3. SPACE OPTIMIZATION



int findWays(vector<int>& arr, int k)
{

	int n=arr.size();
	
vector<long long int>prey(k+1,0),cur(k+1,0);

prey[0]=1;
if(arr[0]<=k)
prey[arr[0]]=1;

cur[0]=1;


for(int i=1;i<n;i++){

for (int j = 1; j <= k; j++) {

  long long take = 0;

  if (arr[i] <= j)
take = prey[j - arr[i]];

  long long nottake = prey[j];

  cur[j] = take + nottake;
}

prey = cur;

}
int ans=prey[k]%1000000009;

return ans;
}

