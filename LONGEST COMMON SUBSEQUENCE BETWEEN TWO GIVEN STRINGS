1. MEMOIZATION

#include<bits/stdc++.h>
using namespace std;

int f(int idx1,int idx2,string s,string t,vector<vector<int>>&dp){

if(idx1<0 || idx2<0)
return 0;

if(dp[idx1][idx2]!=-1)
return dp[idx1][idx2];

if (s[idx1] == t[idx2]) {
dp[idx1][idx2] = 1 + f(idx1 - 1, idx2 - 1, s, t, dp);

return dp[idx1][idx2];
}

dp[idx1][idx2]= max(f(idx1-1,idx2,s,t,dp),f(idx1,idx2-1,s,t,dp));

return dp[idx1][idx2];

}

int lcs(string s, string t) {

int m=s.size();
int n=t.size();

vector<vector<int>>dp(m,vector<int>(n,-1));

int ans=f(m-1,n-1,s,t,dp);

return ans;
	
}

2. TABULATION


#include<bits/stdc++.h>
using namespace std;

int lcs(string s, string t) {
    
int m=s.size();

int n=t.size();

vector<vector<int>>dp(m+1,vector<int>(n+1,0));

for(int i=1;i<=m;i++)
{
    for(int j=1;j<=n;j++)
    {
      if(s[i-1]==t[j-1])
      dp[i][j]=1+dp[i-1][j-1];
      else
      {
          dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
      }

    }
}
return dp[m][n];
	
}


3. SPACE OPTIMIZATION


#include<bits/stdc++.h>
using namespace std;

int lcs(string s, string t) {
    
int m=s.size();

int n=t.size();

vector<int>prey(n+1,0),cur(n+1,0);
for(int i=1;i<=m;i++)
{
    for(int j=1;j<=n;j++)
    {
     if(s[i-1]==t[j-1])
     cur[j]=1+prey[j-1];
     else
     cur[j]=max(cur[j-1],prey[j]);
    }
    prey=cur;
}

return prey[n];
	
}

